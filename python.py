import streamlit as st
from google import genai
from google.genai import types

# üö® CH√ö √ù QUAN TR·ªåNG:
# 1. B·∫°n c·∫ßn c√†i ƒë·∫∑t th∆∞ vi·ªán: pip install google-genai streamlit
# 2. ƒê·∫∑t API key c·ªßa b·∫°n v√†o Streamlit Secrets (t√™n l√† "GEMINI_API_KEY") 
#    ho·∫∑c v√†o bi·∫øn m√¥i tr∆∞·ªùng. ƒêo·∫°n m√£ n√†y s·∫Ω t·ª± ƒë·ªông l·∫•y t·ª´ st.secrets.

# --- C·∫§U H√åNH BAN ƒê·∫¶U ---

# Kh·ªüi t·∫°o Client c·ªßa Gemini
try:
    # L·∫•y API Key t·ª´ Streamlit Secrets
    api_key = st.secrets.get("GEMINI_API_KEY")
    if not api_key:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY trong Streamlit Secrets.")
    else:
        client = genai.Client(api_key=api_key)
except Exception as e:
    st.error(f"L·ªói khi kh·ªüi t·∫°o Gemini Client: {e}")
    st.stop() # D·ª´ng ·ª©ng d·ª•ng n·∫øu kh√¥ng th·ªÉ kh·ªüi t·∫°o

MODEL_NAME = 'gemini-2.5-flash' # M√¥ h√¨nh m·∫°nh m·∫Ω v√† t·ªëi ∆∞u chi ph√≠

# --- H√ÄM X·ª¨ L√ù LOGIC ---

# H√†m kh·ªüi t·∫°o ho·∫∑c l·∫•y ƒë·ªëi t∆∞·ª£ng chat
def get_chat_session():
    """Kh·ªüi t·∫°o ho·∫∑c tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng Chat Session t·ª´ Gemini."""
    if "chat_session" not in st.session_state:
        # Kh·ªüi t·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng chat m·ªõi
        st.session_state.chat_session = client.chats.create(
            model=MODEL_NAME
            # B·∫°n c√≥ th·ªÉ th√™m c·∫•u h√¨nh system_instruction t·∫°i ƒë√¢y n·∫øu mu·ªën
            # system_instruction="B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o th√¢n thi·ªán v√† h·ªØu √≠ch."
        )
        st.session_state.messages = [] # L∆∞u tr·ªØ l·ªãch s·ª≠ tin nh·∫Øn
    return st.session_state.chat_session

# --- KH·ªûI T·∫†O V√Ä HI·ªÇN TH·ªä KHUNG CHAT ---

st.title("ü§ñ Chatbot Gemini tr√™n Streamlit")
st.caption(f"S·ª≠ d·ª•ng m√¥ h√¨nh: **{MODEL_NAME}**")

# L·∫•y/kh·ªüi t·∫°o session chat
chat = get_chat_session()

# Hi·ªÉn th·ªã l·ªãch s·ª≠ tin nh·∫Øn
for message in st.session_state.messages:
    role = "user" if message["role"] == "user" else "assistant"
    with st.chat_message(role):
        st.markdown(message["content"])

# --- √î NH·∫¨P LI·ªÜU (Chat Input) ---

# X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫≠p tin nh·∫Øn
if prompt := st.chat_input("H·ªèi Gemini b·∫•t c·ª© ƒëi·ªÅu g√¨..."):
    # 1. Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
    with st.chat_message("user"):
        st.markdown(prompt)
    
    # L∆∞u tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
    st.session_state.messages.append({"role": "user", "content": prompt})

    # 2. G·ª≠i tin nh·∫Øn ƒë·∫øn Gemini v√† hi·ªÉn th·ªã ph·∫£n h·ªìi
    with st.chat_message("assistant"):
        # G·ª≠i tin nh·∫Øn v√† nh·∫≠n ph·∫£n h·ªìi
        # S·ª≠ d·ª•ng stream=True ƒë·ªÉ hi·ªÉn th·ªã ph·∫£n h·ªìi theo th·ªùi gian th·ª±c (hi·ªán ƒë·∫°i h∆°n)
        with st.spinner("Gemini ƒëang tr·∫£ l·ªùi..."):
            try:
                # G·ª≠i tin nh·∫Øn (prompt) t·ªõi phi√™n chat
                response = chat.send_message(prompt, stream=True)
                
                # T·∫°o m·ªôt placeholder ƒë·ªÉ vi·∫øt c√¢u tr·∫£ l·ªùi t·ª´ng ph·∫ßn
                full_response = ""
                message_placeholder = st.empty()
                
                for chunk in response:
                    # N·ªëi c√°c ph·∫ßn n·ªôi dung nh·∫≠n ƒë∆∞·ª£c
                    full_response += chunk.text
                    # C·∫≠p nh·∫≠t placeholder v·ªõi n·ªôi dung ƒë√£ n·ªëi
                    message_placeholder.markdown(full_response + "‚ñå") # Th√™m con tr·ªè nh·∫•p nh√°y

                # C·∫≠p nh·∫≠t l·∫°i v·ªõi n·ªôi dung ho√†n ch·ªânh
                message_placeholder.markdown(full_response)
                
                # 3. L∆∞u ph·∫£n h·ªìi v√†o l·ªãch s·ª≠
                st.session_state.messages.append({"role": "assistant", "content": full_response})

            except Exception as e:
                error_message = f"ƒê√£ x·∫£y ra l·ªói khi giao ti·∫øp v·ªõi Gemini: {e}"
                st.error(error_message)
                # N·∫øu c√≥ l·ªói, c√≥ th·ªÉ x√≥a tin nh·∫Øn cu·ªëi c√πng c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ h·ªç th·ª≠ l·∫°i
                if st.session_state.messages and st.session_state.messages[-1]["role"] == "user":
                    st.session_state.messages.pop()

# --- KHU V·ª∞C
