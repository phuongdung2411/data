import streamlit as st
import pandas as pd
from google import genai
from google.genai.errors import APIError

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App Ph√¢n T√≠ch B√°o C√°o T√†i Ch√≠nh",
    layout="wide"
)

st.title("·ª®ng d·ª•ng Ph√¢n T√≠ch B√°o C√°o T√†i ch√≠nh üìä")

# --- H√†m t√≠nh to√°n ch√≠nh (S·ª≠ d·ª•ng Caching ƒë·ªÉ T·ªëi ∆∞u hi·ªáu su·∫•t) ---
@st.cache_data
def process_financial_data(df):
    """Th·ª±c hi·ªán c√°c ph√©p t√≠nh TƒÉng tr∆∞·ªüng v√† T·ª∑ tr·ªçng."""
    
    # ƒê·∫£m b·∫£o c√°c gi√° tr·ªã l√† s·ªë ƒë·ªÉ t√≠nh to√°n
    numeric_cols = ['NƒÉm tr∆∞·ªõc', 'NƒÉm sau']
    for col in numeric_cols:
        # ƒê·∫£m b·∫£o chuy·ªÉn ƒë·ªïi Series (df[col]) sang s·ªë, v√† ƒëi·ªÅn 0 cho NaN
        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
    
    # 1. T√≠nh T·ªëc ƒë·ªô TƒÉng tr∆∞·ªüng
    df['T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng (%)'] = (
        (df['NƒÉm sau'] - df['NƒÉm tr∆∞·ªõc']) / df['NƒÉm tr∆∞·ªõc'].replace(0, 1e-9)
    ) * 100

    # 2. T√≠nh T·ª∑ tr·ªçng theo T·ªïng T√†i s·∫£n
    tong_tai_san_row = df[df['Ch·ªâ ti√™u'].str.contains('T·ªîNG C·ªòNG T√ÄI S·∫¢N', case=False, na=False)]
    
    if tong_tai_san_row.empty:
        # N·∫øu kh√¥ng t√¨m th·∫•y d√≤ng "T·ªîNG C·ªòNG T√ÄI S·∫¢N"
        if df['NƒÉm tr∆∞·ªõc'].sum() > 0 or df['NƒÉm sau'].sum() > 0:
            # S·ª≠ d·ª•ng t·ªïng c·ªßa c√°c c·ªôt l√†m gi√° tr·ªã t·ªïng t√†i s·∫£n (ch·ªâ l√† gi·∫£i ph√°p d·ª± ph√≤ng)
            tong_tai_san_N_1 = df['NƒÉm tr∆∞·ªõc'].sum()
            tong_tai_san_N = df['NƒÉm sau'].sum()
        else:
             raise ValueError("Kh√¥ng t√¨m th·∫•y ch·ªâ ti√™u 'T·ªîNG C·ªòNG T√ÄI S·∫¢N' v√† kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·ªïng h·ª£p.")
    else:
        tong_tai_san_N_1 = tong_tai_san_row['NƒÉm tr∆∞·ªõc'].iloc[0]
        tong_tai_san_N = tong_tai_san_row['NƒÉm sau'].iloc[0]

    # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p m·∫´u s·ªë b·∫±ng 0 th·ªß c√¥ng
    divisor_N_1 = tong_tai_san_N_1 if tong_tai_san_N_1 != 0 else 1e-9
    divisor_N = tong_tai_san_N if tong_tai_san_N != 0 else 1e-9

    # T√≠nh t·ª∑ tr·ªçng v·ªõi m·∫´u s·ªë ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
    df['T·ª∑ tr·ªçng NƒÉm tr∆∞·ªõc (%)'] = (df['NƒÉm tr∆∞·ªõc'] / divisor_N_1) * 100
    df['T·ª∑ tr·ªçng NƒÉm sau (%)'] = (df['NƒÉm sau'] / divisor_N) * 100
    
    return df

# --- H√†m g·ªçi API Gemini cho Ph√¢n t√≠ch T√†i ch√≠nh (Ch·ª©c nƒÉng 5) ---
def get_ai_analysis(data_for_ai, api_key):
    """G·ª≠i d·ªØ li·ªáu ph√¢n t√≠ch ƒë·∫øn Gemini API v√† nh·∫≠n nh·∫≠n x√©t."""
    try:
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash' 

        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh chuy√™n nghi·ªáp. D·ª±a tr√™n c√°c ch·ªâ s·ªë t√†i ch√≠nh sau, h√£y ƒë∆∞a ra m·ªôt nh·∫≠n x√©t kh√°ch quan, ng·∫Øn g·ªçn (kho·∫£ng 3-4 ƒëo·∫°n) v·ªÅ t√¨nh h√¨nh t√†i ch√≠nh c·ªßa doanh nghi·ªáp. ƒê√°nh gi√° t·∫≠p trung v√†o t·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng, thay ƒë·ªïi c∆° c·∫•u t√†i s·∫£n v√† kh·∫£ nƒÉng thanh to√°n hi·ªán h√†nh.
        
        D·ªØ li·ªáu th√¥ v√† ch·ªâ s·ªë:
        {data_for_ai}
        """

        response = client.models.generate_content(
            model=model_name,
            contents=prompt
        )
        return response.text

    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}"
    except KeyError:
        return "L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API 'GEMINI_API_KEY'. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh Secrets tr√™n Streamlit Cloud."
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"

# --------------------------------------------------------------------------------------
# --- LOGIC CHUNG C·ª¶A ·ª®NG D·ª§NG ---
# --------------------------------------------------------------------------------------

# --- Ch·ª©c nƒÉng 1: T·∫£i File ---
uploaded_file = st.file_uploader(
    "1. T·∫£i file Excel B√°o c√°o T√†i ch√≠nh (Ch·ªâ ti√™u | NƒÉm tr∆∞·ªõc | NƒÉm sau)",
    type=['xlsx', 'xls']
)

# Kh·ªüi t·∫°o gi√° tr·ªã m·∫∑c ƒë·ªãnh cho ch·ªâ s·ªë thanh to√°n
thanh_toan_hien_hanh_N = "N/A"
thanh_toan_hien_hanh_N_1 = "N/A"
df_processed = None

if uploaded_file is not None:
    try:
        df_raw = pd.read_excel(uploaded_file)
        
        # Ti·ªÅn x·ª≠ l√Ω: ƒê·∫£m b·∫£o ch·ªâ c√≥ 3 c·ªôt quan tr·ªçng
        df_raw.columns = ['Ch·ªâ ti√™u', 'NƒÉm tr∆∞·ªõc', 'NƒÉm sau']
        
        # X·ª≠ l√Ω d·ªØ li·ªáu
        df_processed = process_financial_data(df_raw.copy())

        if df_processed is not None:
            
            # --- Ch·ª©c nƒÉng 2 & 3: Hi·ªÉn th·ªã K·∫øt qu·∫£ ---
            st.subheader("2. T·ªëc ƒë·ªô TƒÉng tr∆∞·ªüng & 3. T·ª∑ tr·ªçng C∆° c·∫•u T√†i s·∫£n")
            st.dataframe(df_processed.style.format({
                'NƒÉm tr∆∞·ªõc': '{:,.0f}',
                'NƒÉm sau': '{:,.0f}',
                'T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng (%)': '{:.2f}%',
                'T·ª∑ tr·ªçng NƒÉm tr∆∞·ªõc (%)': '{:.2f}%',
                'T·ª∑ tr·ªçng NƒÉm sau (%)': '{:.2f}%'
            }), use_container_width=True)
            
            # --- Ch·ª©c nƒÉng 4: T√≠nh Ch·ªâ s·ªë T√†i ch√≠nh ---
            st.subheader("4. C√°c Ch·ªâ s·ªë T√†i ch√≠nh C∆° b·∫£n")
            
            try:
                # L·∫•y T√†i s·∫£n ng·∫Øn h·∫°n
                tsnh_n = df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('T√ÄI S·∫¢N NG·∫ÆN H·∫†N', case=False, na=False)]['NƒÉm sau'].iloc[0]
                tsnh_n_1 = df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('T√ÄI S·∫¢N NG·∫ÆN H·∫†N', case=False, na=False)]['NƒÉm tr∆∞·ªõc'].iloc[0]

                # L·∫•y N·ª£ ng·∫Øn h·∫°n
                no_ngan_han_N = df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('N·ª¢ NG·∫ÆN H·∫†N', case=False, na=False)]['NƒÉm sau'].iloc[0]  
                no_ngan_han_N_1 = df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('N·ª¢ NG·∫ÆN H·∫†N', case=False, na=False)]['NƒÉm tr∆∞·ªõc'].iloc[0]

                # T√≠nh to√°n, tr√°nh chia cho 0
                thanh_toan_hien_hanh_N = tsnh_n / no_ngan_han_N if no_ngan_han_N != 0 else 0
                thanh_toan_hien_hanh_N_1 = tsnh_n_1 / no_ngan_han_N_1 if no_ngan_han_N_1 != 0 else 0
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric(
                        label="Ch·ªâ s·ªë Thanh to√°n Hi·ªán h√†nh (NƒÉm tr∆∞·ªõc)",
                        value=f"{thanh_toan_hien_hanh_N_1:.2f} l·∫ßn"
                    )
                with col2:
                    st.metric(
                        label="Ch·ªâ s·ªë Thanh to√°n Hi·ªán h√†nh (NƒÉm sau)",
                        value=f"{thanh_toan_hien_hanh_N:.2f} l·∫ßn",
                        delta=f"{thanh_toan_hien_hanh_N - thanh_toan_hien_hanh_N_1:.2f}"
                    )
                    
            except IndexError:
                st.warning("Thi·∫øu ch·ªâ ti√™u 'T√ÄI S·∫¢N NG·∫ÆN H·∫†N' ho·∫∑c 'N·ª¢ NG·∫ÆN H·∫†N' ƒë·ªÉ t√≠nh ch·ªâ s·ªë.")
                thanh_toan_hien_hanh_N = "N/A" 
                thanh_toan_hien_hanh_N_1 = "N/A"
            
            # --- Ch·ª©c nƒÉng 5: Nh·∫≠n x√©t AI ---
            st.subheader("5. Nh·∫≠n x√©t T√¨nh h√¨nh T√†i ch√≠nh (AI)")
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ g·ª≠i cho AI
            tt_N = f"{thanh_toan_hien_hanh_N:.2f}" if isinstance(thanh_toan_hien_hanh_N, float) else thanh_toan_hien_hanh_N
            tt_N_1 = f"{thanh_toan_hien_hanh_N_1:.2f}" if isinstance(thanh_toan_hien_hanh_N_1, float) else thanh_toan_hien_hanh_N_1
            
            # L·∫•y tƒÉng tr∆∞·ªüng TSNH an to√†n h∆°n
            try:
                tsnh_growth = df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('T√ÄI S·∫¢N NG·∫ÆN H·∫†N', case=False, na=False)]['T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng (%)'].iloc[0]
                tsnh_growth_str = f"{tsnh_growth:.2f}%"
            except IndexError:
                tsnh_growth_str = "Kh√¥ng x√°c ƒë·ªãnh"

            data_for_ai = pd.DataFrame({
                'Ch·ªâ ti√™u': [
                    'To√†n b·ªô B·∫£ng ph√¢n t√≠ch (d·ªØ li·ªáu th√¥)', 
                    'TƒÉng tr∆∞·ªüng T√†i s·∫£n ng·∫Øn h·∫°n (%)', 
                    'Thanh to√°n hi·ªán h√†nh (N-1)', 
                    'Thanh to√°n hi·ªán h√†nh (N)'
                ],
                'Gi√° tr·ªã': [
                    df_processed.to_markdown(index=False),
                    tsnh_growth_str, 
                    tt_N_1, 
                    tt_N
                ]
            }).to_markdown(index=False) 

            if st.button("Y√™u c·∫ßu AI Ph√¢n t√≠ch"):
                api_key = st.secrets.get("GEMINI_API_KEY") 
                
                if api_key:
                    with st.spinner('ƒêang g·ª≠i d·ªØ li·ªáu v√† ch·ªù Gemini ph√¢n t√≠ch...'):
                        ai_result = get_ai_analysis(data_for_ai, api_key)
                        st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI:**")
                        st.info(ai_result)
                else:
                    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API. Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets.")

    except ValueError as ve:
        st.error(f"L·ªói c·∫•u tr√∫c d·ªØ li·ªáu: {ve}")
    except Exception as e:
        st.error(f"C√≥ l·ªói x·∫£y ra khi ƒë·ªçc ho·∫∑c x·ª≠ l√Ω file: {e}. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng file.")

else:
    st.info("Vui l√≤ng t·∫£i l√™n file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")

# --------------------------------------------------------------------------------------
# --- CH·ª®C NƒÇNG B·ªî SUNG: KHUNG CHAT GEMINI ---
# --------------------------------------------------------------------------------------

st.divider()
st.header("üí¨ Tr√≤ chuy·ªán v·ªõi Gemini (H·ªèi ƒê√°p Chung)")

# L·∫•y API Key t·ª´ Streamlit Secrets
api_key = st.secrets.get("GEMINI_API_KEY")
MODEL_NAME_CHAT = 'gemini-2.5-flash'

# 1. Kh·ªüi t·∫°o Client v√† Session
try:
    client = None
    if not api_key:
        st.warning("‚ö†Ô∏è Vui l√≤ng c·∫•u h√¨nh Kh√≥a **'GEMINI_API_KEY'** trong Streamlit Secrets ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng chat.")
    else:
        client = genai.Client(api_key=api_key)

except Exception as e:
    st.error(f"L·ªói khi kh·ªüi t·∫°o Gemini Client: {e}")
    client = None

# H√†m kh·ªüi t·∫°o ho·∫∑c l·∫•y ƒë·ªëi t∆∞·ª£ng chat
def get_chat_session(client):
    """Kh·ªüi t·∫°o ho·∫∑c tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng Chat Session t·ª´ Gemini."""
    if client and "chat_session" not in st.session_state:
        try:
            # Kh·ªüi t·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng chat m·ªõi
            st.session_state.chat_session = client.chats.create(
                model=MODEL_NAME_CHAT,
                system_instruction="B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o th√¢n thi·ªán v√† h·ªØu √≠ch, chuy√™n gi·∫£i ƒë√°p m·ªçi th·∫Øc m·∫Øc c·ªßa ng∆∞·ªùi d√πng. H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát."
            )
            st.session_state.messages = [] # L∆∞u tr·ªØ l·ªãch s·ª≠ tin nh·∫Øn
        except APIError as e:
            # B·∫Øt l·ªói API c·ª• th·ªÉ (v√≠ d·ª•: x√°c th·ª±c th·∫•t b·∫°i)
            st.error(f"L·ªói API khi kh·ªüi t·∫°o phi√™n chat: Vui l√≤ng ki·ªÉm tra Kh√≥a API c·ªßa b·∫°n c√≥ h·ª£p l·ªá kh√¥ng. Chi ti·∫øt: {e}")
            return None
        except Exception as e:
            st.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi kh·ªüi t·∫°o phi√™n chat: {e}")
            return None

    # Tr·∫£ v·ªÅ session n·∫øu client h·ª£p l·ªá v√† session ƒë√£ ƒë∆∞·ª£c t·∫°o
    return st.session_state.chat_session if client and "chat_session" in st.session_state else None

chat = get_chat_session(client)

if chat:
    # 2. Hi·ªÉn th·ªã l·ªãch s·ª≠ tin nh·∫Øn
    if "messages" not in st.session_state:
        st.session_state.messages = []
        
    for message in st.session_state.messages:
        role = "user" if message["role"] == "user" else "assistant"
        with st.chat_message(role):
            st.markdown(message["content"])

    # 3. √î NH·∫¨P LI·ªÜU (Chat Input)
    if prompt := st.chat_input("B·∫°n mu·ªën h·ªèi Gemini ƒëi·ªÅu g√¨?"):
        # Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # L∆∞u tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
        st.session_state.messages.append({"role": "user", "content": prompt})

        # G·ª≠i tin nh·∫Øn ƒë·∫øn Gemini v√† hi·ªÉn th·ªã ph·∫£n h·ªìi
        with st.chat_message("assistant"):
            # S·ª≠ d·ª•ng st.spinner ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i t·∫£i
            with st.spinner("ƒêang g·ª≠i ƒë·∫øn Gemini..."):
                try:
                    # G·ª≠i tin nh·∫Øn (prompt) t·ªõi phi√™n chat v·ªõi streaming
                    response = chat.send_message(prompt, stream=True)
                    
                    # T·∫°o m·ªôt placeholder ƒë·ªÉ vi·∫øt c√¢u tr·∫£ l·ªùi t·ª´ng ph·∫ßn
